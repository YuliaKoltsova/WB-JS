// Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
// вычисление N-го числа в ряду Фибоначчи 
// вычисление всех чисел в ряду Фибоначчи до числа N
// вычисление N-го простого числа
// вычисление всех простых чисел до числа N

// Будет плюсом, если задумаетесь и об оптимизации.

// 1. Вычисление N-го числа в ряду Фибоначчи 
// Числа Фибоначчи — это ряд натуральных (целых и положительных) чисел, каждое из которых (начиная с третьего) является суммой двух предыдущих:
const getFibNumber = (n) => {
  // a = fib(1), b = fib(2), эти значения по определению равны 1, 
  let a = 1;
  let b = 1;
  for (let i = 3; i <= n; i++) {
      let c = a + b; // получим c = fib(3) как сумму fib(1) и fib(2)
      a = b; // переопределяем а, теперь a = fib(2)
      b = c; // переопределяем b, теперь b = fib(3)
  }
  return b;
}

const fibNumber = getFibNumber(2);
console.log(fibNumber);

// 2. Вычисление всех чисел в ряду Фибоначчи до числа N
const getFibNumbers = (x) => { // x -  число, до которого вычисляем числа в ряду Фибоначчи
  const arrayNumbers = new Array(); // Создаем пустой массив, в который будем добавлять числа
  for (let i = 1; i <= x; i++) { // Пока i меньше, чем заданное число, до которого надо отображать числа в ряду Фибоначчи
    const number = getFibNumber(i); // вычисляем числа
    arrayNumbers.push(number); // Добавляем их в массив
  }
  return arrayNumbers;
}

const numbers = getFibNumbers(3);
console.log(numbers);

// 3. Вычисление N-го простого числа
// Простые числа - это числа, которые делятся без остатка только на 1 и на само себя.

// Проверяем является ли число простым. 
const isPrime = (num) => { 
  for (let i = 2; i < num; i++) { // Делим заданное число на все числа от 2 до заданного num-1
    if (num % i === 0) return false; //возвращает false, если число делится на какое-то из них без остатка
  }
  return num !== 1; // Проверояем что число не 1
} //Если число не делится на ни одно из этих чисел, то оно является простым.

 // выводим нужное простое число 
const printPrime = (n) => {
  const arrayNumbers = new Array(); // Создаем пустой массив, куда добавим все простые числа
  for (let i = 2; i <= n + 1000; i++) { // Заолняем массив простыми числами (+1000 для того, чтобы генерировать нужное количество чисел и среди них искать нужное по порядковому номеру)
    if (isPrime(i)) { // Если число простое, то добавляем его в массив
      arrayNumbers.push(i);
    }
  }
  const prime = arrayNumbers[n - 1]; // выводим простое число по порядковому номеру(n-1, так как отсчет в массиве начинается с 0, а не с 1)
  return prime; // возвращаем полученное n-ое простое число
}

const primeN = printPrime(4);
console.log(primeN);

// 4. Вычисление всех простых чисел до числа N
const printPrimes = (n) => { // выводим нужное простое число 
  const arrayNumbers = new Array(); // Создаем пустой массив, куда добавим все простые числа
  for (let i = 2; i <= n; i++) { // Заолняем массив простыми числами (+1000 для того, чтобы генерировать нужное количество чисел и среди них искать нужное по порядковому номеру)
    if (isPrime(i)) { // Если число простое, то добавляем его в массив
      arrayNumbers.push(i);
    }
  }
  return arrayNumbers;
}

const primes = printPrimes(10);
console.log(primes);